# src/main.py
import os
import sys
# Force UTF-8 encoding for Windows
os.environ['PYTHONIOENCODING'] = 'utf-8'
sys.stdout.reconfigure(encoding='utf-8')
import logging

# Pridanie kore≈àov√©ho adres√°ra do PYTHONPATH pre spr√°vne importy
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from src.agent.graph import create_graph
from src.logger import setup_logger

def run_agent(query: str):
    """Spust√≠ Grant Finder agenta pre zadan√Ω dopyt."""
    
    # 1. Nastavenie loggera (mus√≠ by≈• prv√©)
    try:
        # Inicializuje hlavn√Ω logger a nastav√≠ konfigur√°ciu pre ostatn√© moduly (cez __name__)
        logger = setup_logger("Main")
    except Exception as e:
        print(f"‚ùå Kritick√° chyba: Nepodarilo sa nastavi≈• logger: {e}")
        return

    # 2. Valid√°cia vstupu
    if not query or len(query.strip()) < 5:
        # Pou≈æijeme logger.error pre konzistentnos≈•, ale keƒè≈æe logger vypisuje na konzolu, je to viditeƒæn√©
        logger.error("‚ùå Chyba vstupu: Zadajte pros√≠m konkr√©tnej≈°√≠ dopyt (min. 5 znakov)")
        return
        
    logger.info(f"üîç Sp√∫≈°≈•am Grant Finder Agenta")
    logger.info(f"üìù Va≈°a po≈æiadavka: '{query}'")
    
    # 3. Inicializ√°cia agenta (Grafu a N√°strojov)
    try:
        # create_graph() interne vol√° initialize_tools(). 
        # Ak inicializ√°cia zlyh√° (ValueError z config.py), zachyt√≠me ju tu.
        app = create_graph()
    except ValueError as e:
        # Zachyt√°va chyby konfigur√°cie (ch√Ωbaj√∫ce API kƒæ√∫ƒçe)
        logger.error(f"\n‚ùå Chyba konfigur√°cie: {e}")
        # Vyp√≠≈°eme pomocn√© in≈°trukcie. Keƒè≈æe logger vypisuje spr√°vy bez prefixov, v√Ωstup je ƒçist√Ω.
        logger.info("\nüí° Rie≈°enie:")
        logger.info("1. Uistite sa, ≈æe existuje s√∫bor .env v kore≈àovom adres√°ri projektu.")
        logger.info("2. Skop√≠rujte .env.example ako .env, ak ste tak e≈°te neurobili.")
        logger.info("3. Dopl≈àte platn√© API kƒæ√∫ƒçe do .env:")
        logger.info("   - OPENAI_API_KEY (z https://platform.openai.com)")
        logger.info("   - TAVILY_API_KEY (z https://tavily.com)")
        return
    except Exception as e:
        logger.error(f"‚ùå Neoƒçak√°van√° chyba pri inicializ√°cii agenta: {e}", exc_info=True)
        return

    # 4. Spustenie agenta
    initial_state = {"user_query": query}
    final_state = None
    
    try:
        # Iterujeme cez v√Ωstupy
        for output in app.stream(initial_state):
            for key, value in output.items():
                if key != "__end__":
                   final_state = value
        
        logger.info("\n================ FIN√ÅLNY REPORT ================\n")
        if final_state and "final_report" in final_state:
            report = final_state["final_report"]
            # Vyp√≠≈°eme fin√°lny report (cez logger, ktor√Ω m√° ƒçist√Ω console output)
            logger.info(report)
            logger.info("\n‚úÖ √öloha √∫spe≈°ne dokonƒçen√°.")
        else:
            logger.warning("‚ö†Ô∏è Agent dokonƒçil pr√°cu, ale nevygeneroval fin√°lny report.")

    except Exception as e:
        logger.error(f"\n‚ùå Nastala chyba poƒças behu agenta: {e}", exc_info=True)

if __name__ == "__main__":
    # Predvolen√Ω testovac√≠ dopyt
    default_query = "Granty pre v√Ωskum etiky umelej inteligencie a jej dopadu na n√°bo≈æensk√© komunity v Eur√≥pe."

    # Umo≈æn√≠me zada≈• dopyt ako argument pr√≠kazov√©ho riadku
    if len(sys.argv) > 1:
        user_query = " ".join(sys.argv[1:])
        run_agent(user_query)
    else:
        run_agent(default_query)
